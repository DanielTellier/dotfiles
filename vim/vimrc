let $RTP=split(&runtimepath,',')[0]
let $VRC=$HOME."/.vim/vimrc"
let g:fugitive_git_executable = "/usr/bin/git"
let g:snippets_base_directory = $RTP.'/plugin/vim-snippets/snippets'
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_preview = 1
let g:netrw_winsize = 80

colorscheme desert
filetype plugin indent on
syntax on

if system('uname -s') == "Darwin\n"
  set clipboard=unnamed " Mac
else
  set clipboard=unnamedplus " Linux
endif

set autoindent autoread
set backspace=start,eol,indent
set backupdir=$HOME/.local/share/vim/backup/
set colorcolumn=80
highlight ColorColumn ctermbg=22
set complete=.,w,b,u,t
set noconfirm
set encoding=utf-8
set expandtab tabstop=4 softtabstop=4 shiftwidth=4
set fillchars=vert:\|,fold:-
set formatoptions=tcqj
set hidden
set history=10000
set hlsearch incsearch
set ignorecase smartcase
set laststatus=2
set list
set listchars=tab:>-,precedes:.,trail:.,extends:.,eol:$
set nocompatible
set nojoinspaces
set nostartofline
set noswapfile
set nowrap
set number relativenumber
set redrawtime=10000 " Loading syntax in files
set ruler
set runtimepath+=$HOME/.vim/after
set viminfo+=n~/.viminfo
set scrolloff=8
set showcmd
set sidescroll=1
set sidescrolloff=8
set smarttab
set splitright
set statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set t_Co=256
set title
set ttyfast
set undolevels=100
set undodir=$HOME/.local/state/vim/undo/
set undofile
set updatetime=5000 " Time in milliseconds for CursorHold to take effect
set wildignore=*.o,*.d,*.exe,*.a,*.so,*.out
set wildmenu
set wildmode=longest:full,full
set writebackup

function! OpenNetrw()
    exe '0tabnew'
    exe 'Explore'
    exe '2tabnext'
endfunction

function! SplitNetrw(split)
    exe 'normal v'
    let bufn = bufname()
    exe 'close!'
    exe '2tabnext'
    if a:split == "horizontal"
        exe 'split ' . bufn
    elseif a:split == "vertical"
        exe 'vsplit ' . bufn
    else
        exe 'edit ' . bufn
    endif
endfunction

function! ToggleNumbers()
  if &relativenumber
    set norelativenumber
  elseif &number
    set nonumber
  else
    set number relativenumber
  endif
endfunction

function! SurroundMappings(map_type)
    let chars = ['`', "'", '"', ']', '}', ')', '>', 't']
    for char in chars
        if a:map_type == "word"
            exe 'nmap <leader>w'.char.' ysiw'.char
        elseif a:map_type == "line"
            exe 'nmap <leader>l'.char.' yss'.char
        elseif a:map_type == "change"
            for curr_char in chars
                if curr_char == char
                    continue
                endif
                exe 'nmap <leader>'.curr_char.char.' cs'.curr_char.char
            endfor
        elseif a:map_type == "delete"
            exe 'nmap <leader>d'.char.' ds'.char
        endif
    endfor
endfunction

command! -nargs=+ -complete=file Grep call search#Grep_(<f-args>)

augroup spellcheck
  autocmd!
  autocmd FileType gitcommit,markdown setlocal spell spelllang=en_us
  autocmd FileType gitcommit,markdown setlocal complete+=kspell
  autocmd FileType tex,latex,context,plaintex setlocal spell spelllang=en_us
  autocmd FileType tex,latex,context,plaintex setlocal complete+=kspell
augroup end

" File templates
augroup templates
  autocmd!
  autocmd BufNewFile *.py 0r $RTP/templates/template.py
augroup END

augroup autosave
  autocmd!
  autocmd CursorHold,CursorHoldI,QuitPre * :wa
augroup END

augroup netrw
    autocmd!
    autocmd VimEnter * :call OpenNetrw()
    " Close Netrw if it's the only buffer open
    autocmd WinEnter * if &ft ==# "netrw" && tabpagenr('$') == 1 | :qa | endif
    " Hack fix to make ctrl-l work properly
    autocmd FileType netrw noremap <buffer> <c-l> <c-w>l
    autocmd FileType netrw nnoremap <buffer> <silent> <nowait> <leader>e :call SplitNetrw("edit")<cr>
    autocmd FileType netrw nnoremap <buffer> <silent> <nowait> <leader>o :call SplitNetrw("horizontal")<cr>
    autocmd FileType netrw nnoremap <buffer> <silent> <nowait> <leader>v :call SplitNetrw("vertical")<cr>
augroup END

let mapleader="\<space>"

" Move cursor infront of closing pair symbol
let g:AutoPairsShortcutJump = "<c-,>"

" Open key mappings doc
noremap <silent> <leader>hd :tabnew $RTP/doc/common-maps.txt<cr>

" Open vimrc
noremap <silent> <leader>hv :tabnew $RTP/vimrc<cr>

" Toggle highlights
nnoremap <silent> <leader>th
\ :if (&hls && v:hlsearch) \| nohlsearch \| else \| set hlsearch \| endif<cr>

" Toggle listchars
nnoremap <silent> <leader>tl
\ :if (&list) \| set nolist \| else \| set list \| endif<cr>

" Toggle numbers
nnoremap <silent> <leader>tn :call ToggleNumbers()<cr>

" Global substitution
nnoremap <leader>rg :%s/<c-r><c-w>//g<left><left>
nnoremap <leader>rc :%s/<c-r><c-w>//gc<left><left><left>
vnoremap <leader>rg "zy:%s/<c-r>z//g<left><left>
vnoremap <leader>rc "zy:%s/<c-r>z//gc<left><left><left>

" Search word under cursor
nnoremap <silent> <leader>gw :Grep . all "\b<c-r><c-w>\b"<cr>:cw<cr>

" Search word user input
nnoremap <leader>gi :Grep<space>

" paste last thing yanked, not deleted
nmap ,p "0p
nmap ,P "0P

" You Surrounds word
call SurroundMappings("word")

" You Surrounds line
call SurroundMappings("line")

" Change Surrounds
call SurroundMappings("change")

" Delete Surrounds
call SurroundMappings("delete")

" Compiler make
nnoremap <silent> <leader>cm :make % <bar> redraw!<cr><cr>

" Quick Fix List next and previous
nnoremap <leader>qn :cn
nnoremap <leader>qp :cp

" Make Y behave like other capitals
nnoremap Y y$

" Keep it centered
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

" Command line mode without shift+;
nnoremap ; :
vnoremap ; :

" Faster split window navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Force use of hjkl-style movement and up(c-b)/down(c-f)
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
map <pageup> <nop>
map <pagedown> <nop>
map <home> <nop>
map <end> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
imap <pageup> <nop>
imap <pagedown> <nop>
imap <home> <nop>
imap <end> <nop>

" Remap these keys to work with hjkl-style movement
map $ <nop>
map ^ <nop>
map { <nop>
map } <nop>
noremap K {
noremap J }
noremap H ^
noremap L $

" Tabbing
nnoremap <tab> >>
nnoremap <s-tab> <<
vnoremap <tab> >>
vnoremap <s-tab> <<

" Allow saving of files as sudo when I forgot to start vim using sudo.
" cmap w!! w !sudo tee > /dev/null %
